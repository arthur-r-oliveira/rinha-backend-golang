# ---- Builder Stage ----
# Use the UBI 9 Go Toolset image to build the application
FROM registry.access.redhat.com/ubi9/go-toolset:latest AS builder

# Set the working directory
WORKDIR /go/src/app

# The default user in this image is 1001. We copy files with this ownership.
# Copy go.mod and go.sum to download dependencies first and leverage caching
COPY --chown=1001:0 go.mod go.sum ./
RUN go mod download

# Copy the rest of the application source code
COPY --chown=1001:0 . .

# Tidy ensures go.mod and go.sum are synchronized with the full codebase.
RUN go mod tidy

# Build the application statically, which is crucial for a minimal image
# CGO_ENABLED=0 disables Cgo, creating a pure Go binary
# -ldflags="-s -w" strips debugging information, making the binary smaller
# The output is written to the current working directory (/go/src/app)
RUN CGO_ENABLED=0 GOOS=linux go build -a -ldflags="-s -w" -o app .

# ---- Final Stage ----
# Use the ubi-minimal image for a small and secure runtime
FROM registry.access.redhat.com/ubi9/ubi-minimal:latest

# Copy the compiled application from the builder stage
COPY --from=builder /go/src/app/app /app

# Run as a non-root user with a specific UID
USER 1001

# The final image will not have a shell, so use exec format for CMD
# This is more secure and efficient.
CMD ["/app"]
